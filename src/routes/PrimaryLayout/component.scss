
.content,
.detail {
  // background-color: $color-white;
  // border: dashed 1px $color-rhino-30;
}

@media (min-width: 80rem) {
  .container {
    width: 80rem;
    // @include make-container();
      position: relative;
      margin-left: auto;
      margin-right: auto;
      // @each $breakpoint in map-keys($gutters) {
      //   @include media-breakpoint-up($breakpoint) {
      //     $gutter: map-get($gutters, $breakpoint);
      //     padding-right: ($gutter / 2);
      //     padding-left:  ($gutter / 2);
      //   }
      // }
  }
}

.row {
  // @include make-row();
    display: flex;
    flex-wrap: wrap;
    // @each $breakpoint in map-keys($gutters) {
    //   @include media-breakpoint-up($breakpoint) {
    //     $gutter: map-get($gutters, $breakpoint);
    //     margin-right: ($gutter / -2);
    //     margin-left:  ($gutter / -2);
    //   }
    // }
  composes: justify-content-between from $bootstrap-path;
  // removes the negative margin from Bootrap row. There is likely a better way
  margin: 0 0 !important;
}

.header {
  // @include make-col-ready();
    position: relative;
    // Prevent columns from becoming too narrow when at smaller grid tiers by
    // always setting `width: 100%;`. This works because we use `flex` values
    // later on to override this initial width.
    width: 100%;
    min-height: 1px; // Prevent collapsing
    // @each $breakpoint in map-keys($gutters) {
    //   @include media-breakpoint-up($breakpoint) {
    //     $gutter: map-get($gutters, $breakpoint);
    //     padding-right: ($gutter / 2);
    //     padding-left:  ($gutter / 2);
    //   }
    // }
  composes: p-6 mb-6 from $bootstrap-path;
  box-shadow: 0px 3px 5px 0px $color-nepal;
  color: $color-athens-gray;
  background-color: $color-persimmon;
}

.content {
  // @include make-col-ready();
    position: relative;
    // Prevent columns from becoming too narrow when at smaller grid tiers by
    // always setting `width: 100%;`. This works because we use `flex` values
    // later on to override this initial width.
    width: 100%;
    min-height: 1px; // Prevent collapsing
    // @each $breakpoint in map-keys($gutters) {
    //   @include media-breakpoint-up($breakpoint) {
    //     $gutter: map-get($gutters, $breakpoint);
    //     padding-right: ($gutter / 2);
    //     padding-left:  ($gutter / 2);
    //   }
    // }
  // @include make-col(5.439);
  flex: 0 0 45%;
  max-width: 45%;
  overflow: auto;
  max-height: 80vh;
}

.sidebar {
  // @include make-col-ready();
    position: relative;
    // Prevent columns from becoming too narrow when at smaller grid tiers by
    // always setting `width: 100%;`. This works because we use `flex` values
    // later on to override this initial width.
    width: 100%;
    min-height: 1px; // Prevent collapsing
    // @each $breakpoint in map-keys($gutters) {
    //   @include media-breakpoint-up($breakpoint) {
    //     $gutter: map-get($gutters, $breakpoint);
    //     padding-right: ($gutter / 2);
    //     padding-left:  ($gutter / 2);
    //   }
    // }
  // @include make-col(3);
  flex: 0 0 25%;
  max-width: 25%;
  transition-delay: 0.1s;
  transition-duration: 0.3s;
  right: 0px;
  &.hidden {
    opacity: 0;
    right: -60px;
    transition-delay: 0.0s;
  }
}

.detail {
  composes: detail;
  padding-top: 24px;
  position: absolute;
  top: 56px;
  right: 0px;
  flex: 0 0 45%;
  max-width: 45%;
  box-shadow: 0px 4px 56px 0px $color-alto;
  transition-delay: 0.1s;
  transition-duration: 0.2s;
  height: 100vh;
  width: 100vw;
  &.hidden {
    opacity: 0;
    right: -580px;
    transition-delay: 0.0s;
  }
}
